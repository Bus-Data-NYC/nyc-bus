<!DOCTYPE HTML>
<html>
  <head>
    <title>Bus query tool</title>
    <link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"></link>

    <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
    <script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>


    <!-- leaflet -->
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.5/leaflet.css" />
    <script src="http://cdn.leafletjs.com/leaflet-0.7.5/leaflet.js"></script>
    <script src="bower_components/heatmap.js-amd/build/heatmap.min.js"></script>
    <script src="bower_components/heatmap.js-amd/plugins/leaflet-heatmap.js"></script>

    <!-- typeahead -->
    <script src="bower_components/typeahead.js/dist/typeahead.jquery.min.js"></script>
  </head>

  <style>
    .map {
      width: 100%;
      height: 400px;
    }
    .btn, .input-group-addon, .form-control {
      border-radius: 0px;
    }
    .tt-dataset.tt-dataset-routes {
      background-color: #FFF;
      padding: 5px;
      border: 1px solid #ccc;
    }
    .twitter-typeahead {
      display: table-cell !important;
    }
  </style>
  
  <body>
    <div class="container">
      
      <h2>
        Mode performance and crash data
        <small id="loading" class="label label-default">
          ...loading...
        </small>
      </h2>
      
      <div class="row" style="max-height: 34px;">
        <div class="col-xs-12">
          <div class="input-group pull-left" id="bus-search" style="width:150px">
            <span class="input-group-addon" style="max-height:34px; overflow-y: hidden">Route</span>
            <input type="text" class="typeahead form-control" id="routeSelect">
          </div>
          <div class="btn btn-default" onclick="routeSelect()">
            Load
          </div>

          <div class="btn btn-default pull-right" onclick="socrataQ()">
            Run
          </div>
          <div class="input-group pull-right" style="width:125px">
            <span class="input-group-addon">Killed</span>
            <input type="number" class="form-control" min="0" max="10" value="90" id="kill">
          </div>
          <div class="input-group pull-right" style="width:125px">
            <span class="input-group-addon">Injured</span>
            <input type="number" class="form-control" min="0" max="10" value="1" id="injure">
          </div>
        </div>
      </div>

      <div class="row">
        <div class="col-xs-12">
          <div class="map" id="map">
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-xs-12">
          <div class="btn btn-default btn-xs pull-left" onclick="stopsToggle()">
            Toggle Stops
          </div>
          <div class="btn btn-default btn-xs pull-left" onclick="markerToggle()">
            Toggle Markers
          </div>
          <div class="btn btn-default btn-xs pull-left" onclick="heatToggle()">
            Toggle Heatmap
          </div>
        </div>
      </div>

    </div>
  </body>

  <script type="text/javascript">

    var intervalGlobal = null;

    var cfg = {
      radius: 0.01,
      maxOpacity: .5, 
      scaleRadius: true, 
      useLocalExtrema: true,
      latField: 'latitude',
      lngField: 'longitude',
      valueField: 'number_of_persons_injured'
    };
    var heatmapLayer = new HeatmapOverlay(cfg);

    var crashes = null;
    var stops = null;
    var map = new L.map('map', {
      center: new L.LatLng(40.75, -73.92),
      zoom: 12,
      layers: [heatmapLayer]
    });

    L.tileLayer('http://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    function socrataQ () {
      animateLoading()

      $.post('socrata', {
        mode: 'BUS',
        kill: $('#kill').val(),
        injure: $('#injure').val()
      })
      .done(function (res) {
        if (crashes !== null) { map.removeLayer(crashes.L); }
        var markers = [];
        res.data = res.data.map(function (data) {
          if (data.location && !data.location.needs_recoding) {
            var options = {
              stroke: false,
              radius: 3
            }
            var lat = parseFloat(data.location.latitude),
                lng = parseFloat(data.location.longitude), 
                latlng = L.latLng(lat, lng);
            markers.push(L.circle([lat, lng], 20, options));
            return data;
          }
        });
        res.data = res.data.filter(function (data) {
          return data !== undefined;
        });

        crashes = {
          base: res.data,
          L: L.layerGroup(markers)
        };
        heatmapLayer.setData({data: []});
        crashes.L.addTo(map);
        terminateLoading()
      })
      .fail(function (err) {
        console.log('Call failed: ', err);
      });
    };

    function markerToggle () {
      if (crashes !== null) { 
        if (map.hasLayer(crashes.L)) {
          map.removeLayer(crashes.L);   
        } else {
          crashes.L.addTo(map);
        }
      }
    };

    function stopsToggle () {
      if (crashes !== null) { 
        if (map.hasLayer(stops)) {
          map.removeLayer(stops);   
        } else {
          console.log(stops);
          stops.addTo(map);
        }
      }
    };

    function heatToggle () {
      if (crashes !== null) {
        var hmData = heatmapLayer._heatmap.getData();
        hmData = hmData.data.length > 0 ? [] : crashes.base; 
        var heatData = {data: hmData};
        heatmapLayer.setData(heatData);
      }
    };

    function routeSelect () {
      var route = $("#routeSelect").val();
      if (route !== '' && route !== undefined) {
        animateLoading();
        $.post('/sql/route/path', {route: route})
        .done(function (res) {
          console.log('res' , res);

          var pointlist = {};
          for (dir in res.pointlist) {
            pointlist[dir] = [];
            var paths = res.pointlist[dir];
            for (path in paths) {
              path = paths[path];
              var sec = [];
              for (point in path) {
                point = path[point];
                var crumb = new L.LatLng(point.shape_pt_lat, point.shape_pt_lon);
                crumb.properties = point;
                sec.push(crumb);
              }
              pointlist[dir].push(sec);
            };
          }

          for (dir in pointlist) {
            for (sec in pointlist[dir]) {
              var polyline = new L.Polyline(pointlist[dir][sec], {
                color: '#ff3232',
                weight: 2,
                opacity: 0.75,
                smoothFactor: 1
              });
              polyline.addTo(map);
            }
          };

          terminateLoading();
        })
        .fail(function (err) {
          console.log('Route call failed: ', err);
        })

        $.post('/sql/route/stops', {route: route})
        .done(function (res) {
          console.log(res)
        })
        .fail(function (err) {
          console.log('MyTransit NYC Beta call failed: ', err);
        })
      }
    };

    var substringMatcher = function(strs) {
      return function findMatches(q, cb) {
        var matches, substringRegex;
        matches = [];
        substrRegex = new RegExp(q, 'i');
        $.each(strs, function(i, str) {
          if (substrRegex.test(str)) { matches.push(str); }
        });
        cb(matches);
      };
    };

    function animateLoading () {
      clearInterval(intervalGlobal);
      $('#loading').text('...loading...');
      intervalGlobal = setInterval(function () {
        var text = $('#loading').text();
        var text = text.substr(text.length-2, text.length-1) + text.substr(0, text.length-2); 
        $('#loading').text(text);
      }, 150);
    };

    function terminateLoading () {
      clearInterval(intervalGlobal);
      $('#loading').text('');
    }

    $(document).ready(function () {

      $('#bus-search .typeahead')
      .typeahead({
        hint: true,
        highlight: true,
        minLength: 1
      }, {
        name: 'routes',
        source: substringMatcher('<%= buslines %>'.split(','))
      });

      $.getJSON('static/data/busstops.geojson')
        .complete(function(data) { 
          var res = JSON.parse(data.responseText);
          stops = res;
          // stops.features = stops.features.slice(0,2000);
          stops.features = stops.features.map(function (stop) {
            var lat = stop.properties.stop_lat;
            var lng = stop.properties.stop_lon;
            stop.geometry.coordinates = [lng, lat];
            return stop;
          });

          var style = {
            radius: 2,
            fillColor: "#ff7800",
            weight: 0,
            fillOpacity: 0.8
          };

          stops = L.geoJson(stops, {
            pointToLayer: function (feature, latlng) {
              return L.circle(latlng, 15, style);
            }
          });

        });

      socrataQ();
    });

  </script>
</html>




